AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template to launch N EC2 Instances to run a Centralized Federated Learning system'
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Default: vpc-018fbabf2c7bfd882
  SubnetId:
    Description: The ID of the Subnet where EC2 instances will be created
    Type: AWS::EC2::Subnet::Id
    Default: subnet-036c7dfe5c5503af0
  InstanceType:
    Description: EC2 instance type. Use at least '.small' for 2GB Memory
    Type: String
    Default: t2.small 
    AllowedValues: [t2.micro, t2.small, t2.medium, t3.micro, t3.small, t3.medium]
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: key1
  ClientCount:
    Description: Number of Clients to launch. At least 2 for Federated Learning
    Type: Number
    Default: 2
  Bucket:
    Type: String
    Description: "Name of the S3 bucket"
    Default: "mirko-bucket1"
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
    Default: "example@gmail.com"
  EnableScalingPolicy:
    Description: "Set to 'true' to enable the scaling policy or 'false' to disable it."
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
  TrainingRounds:
    Description: Number of training rounds for the FL instance. (Example of parameter to pass to the script)
    Type: Number
    Default: 3


Conditions:
  CreateScalingPolicy: !Equals [ !Ref EnableScalingPolicy, "true" ]

Resources:
  FedServerEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      #ImageId: ami-09988af04120b3591 # Amazon Linux 2 AMI (HVM), SSD Volume Type
      ImageId: ami-030c79dfe54c09450 # Amazon Linux 2 custom image with all installed (to speed up boot time)
      IamInstanceProfile: !Ref MyInstanceProfile
      Tags: 
        - Key: Name
          Value: !Sub 
            - "FedServer-${ClientCount}"
            - ClientCount: !Ref ClientCount
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet: 
            - !Ref InstanceSecurityGroup
          SubnetId: !Ref SubnetId
          #PrivateIpAddress: 172.31.88.9 # fixed ip address
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          touch IM_THE_SERVER.txt
          
          # COMMON SETUP (packages installation commented since it is already done in the custom image)
          #sudo yum -y update
          #sudo yum update -y aws-cfn-bootstrap
          #sudo yum update -y aws-cli
          #sudo yum install -y python3 python3-pip git htop
          

          #python3 -m pip install -U pip setuptools wheel 
          #python3 -m pip install tensorflow-cpu
          #python3 -m pip install flwr
          git clone https://github.com/mirqr/cloudlab-fed.git
          # COMMON SETUP END

          local_ip_server=$(ec2-metadata --local-ipv4  | cut -d " " -f 2)
          python3 cloudlab-fed/src/fed_server.py --ip_address $local_ip_server --rounds ${TrainingRounds} --clients ${ClientCount} > server_output.txt

          #aws s3 cp server_output.txt s3://${Bucket}/server_output.txt
          
          # write log to s3
          aws s3 cp log_server.txt s3://${Bucket}/log_server_${ClientCount}.txt 

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and all outbound traffic
      SecurityGroupIngress: # open all ports for all ip addresses. Better to restrict 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535 
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  ClientsLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData: 
        #IamInstanceProfile: # if you want to use the same instance profile as the server (enable s3 write)
          #Arn: !GetAtt MyInstanceProfile.Arn 
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        #ImageId: ami-09988af04120b3591 # Amazon Linux 2 AMI (HVM), SSD Volume Type
        ImageId: ami-030c79dfe54c09450 # Amazon Linux 2 custom image with all installed (to speed up boot time)
        SecurityGroupIds: 
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            touch IM_A_CLIENT.txt

            # COMMON SETUP (packages installation commented since it is already done in the custom image)
            #sudo yum -y update
            #sudo yum update -y aws-cfn-bootstrap
            #sudo yum update -y aws-cli
            #sudo yum install -y python3 python3-pip git htop
            

            #python3 -m pip install -U pip setuptools wheel 
            #python3 -m pip install tensorflow-cpu
            #python3 -m pip install flwr
            git clone https://github.com/mirqr/cloudlab-fed.git
            # COMMON SETUP END
            
            #aws s3 cp s3://${Bucket}/my_script.py my-my_script.py # check if my-bucket to variabile
            

            id_client=$(ec2-metadata -i  | cut -d " " -f 2) # take instance id
            echo "${FedServerEC2Instance.PrivateIp}" > server_ip # Server viene creato prima. Sarebbe ancora meglio usare DNS
            server_ip="${FedServerEC2Instance.PrivateIp}"

            python3 cloudlab-fed/src/fed_client.py --ip_address $server_ip > client_output_$id_client.txt
            #aws s3 cp client_output_$id_client.txt s3://${Bucket}/client_output_$id_client.txt
     
  ClientsAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
      - FedServerEC2Instance
    Properties:
      MinSize: '2'
      MaxSize: '40'
      DesiredCapacity: !Ref ClientCount
      NotificationConfigurations:
        - NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
          TopicARN: !Ref ScalingNotificationTopic
      LaunchTemplate:
        LaunchTemplateId: !Ref ClientsLaunchTemplate
        Version: !GetAtt ClientsLaunchTemplate.LatestVersionNumber
      AvailabilityZones: 
          - us-east-1a
      VPCZoneIdentifier:
          - !Ref SubnetId
  
  CpuScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Condition: CreateScalingPolicy  # Apply the condition
    Properties:
      AutoScalingGroupName: !Ref ClientsAutoScalingGroup # agganciato al gruppo di auto scaling (i client)
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization

  ScalingNotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEMail
          Protocol: email
      #DisplayName: 'AutoScaling Notifications' # se fissi il nome non devi confermare l'iscrizione ogni volta, ma se creai stack uno dopo l'altro da errore di nome sns gia usato
      #TopicName: 'AutoScalingNotifications'
  
  EmailSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Protocol: 'email'
      Endpoint: !Ref OperatorEMail
      TopicArn: !Ref ScalingNotificationTopic 


  MyInstanceProfile: # is the instance profile that the ec2 instance will use
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Roles: 
        - !Ref S3WritableRole
    
  S3WritableRole: # is the AIM role that the ec2 instance will assume
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  MyPolicy: # is the IAM policy that grants the EC2 instance the necessary permissions to put objects into the S3 bucket.
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: "FL-S3Policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: "s3:*" # "s3:PutObject" and "s3:GetObject" etc to restrict the permissions
            Resource: "*"  # "arn:aws:s3:::${Bucket}/*"  to restrict the permissions
      Roles: 
        - !Ref S3WritableRole